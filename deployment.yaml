AWSTemplateFormatVersion: '2010-09-09'
Resources:
  MyVPCId:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: VPC-mediawiki
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: VPC Internet Gateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPCId
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPCId
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ap-south-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPCId
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: ap-south-1a
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPCId
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: ap-south-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPCId
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: ap-south-1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPCId
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPCId
      Tags:
      - Key: Name
        Value: Private Route Table

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to client host
        GroupName: AppELBSecurityGroup
        VpcId: 
          Ref: MyVPCId
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to client host
        GroupName: AppInstanceSecurityGroup
        VpcId: 
          Ref: MyVPCId
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
          
         
    DependsOn:
    - ELBSecurityGroup
  AppELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name:
        Ref: InternalELBName
      Scheme: internet-facing
      SecurityGroups: [
        Ref: ELBSecurityGroup ]
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      Type: application
  
      
  AppELBTargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: 
        Fn::If: [AppListenerColorBlue, "/" ,"/"]
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 10
      Matcher:
        HttpCode: '200'
      Name:
        Ref: TargetGroupBlueName
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: MyVPCId
    DependsOn:
    - AppELB
  AppELBTargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: 
        Fn::If: [AppListenerColorBlue, "/" ,"/"]
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 10
      Matcher:
        HttpCode: '200'
      Name:
        Ref: TargetGroupGreenName
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      UnhealthyThresholdCount: 5
      VpcId:
        Ref: MyVPCId
    DependsOn:
    - AppELB
  AppELBDefaultListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: AppELB
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Fn::If:
          - AppListenerColorBlue
          - Ref: AppELBTargetGroupBlue
          - Ref: AppELBTargetGroupGreen
      Port: 80
      Protocol: HTTP
    DependsOn:
    - AppELB
    - AppELBTargetGroupBlue
    - AppELBTargetGroupGreen
  ELBListenerRuleBlue:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: AppELBTargetGroupBlue
      Conditions:
      - Field: path-pattern
        Values:
        - "/app-blue"
      ListenerArn:
        Ref: AppELBDefaultListener
      Priority: 1
    DependsOn:
    - AppELBDefaultListener
    - AppELBTargetGroupBlue
  ELBListenerRuleGreen:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: AppELBTargetGroupGreen
      Conditions:
      - Field: path-pattern
        Values:
        - "/app-green"
      ListenerArn:
        Ref: AppELBDefaultListener
      Priority: 2
    DependsOn:
    - AppELBDefaultListener
    - AppELBTargetGroupGreen
  AppAutoScalingGreen:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity:
        Ref: ASGGreenSize
      HealthCheckType: ELB
      HealthCheckGracePeriod: '900'
      LaunchConfigurationName:
        Ref: AppLaunchConfigurationGreen
      MaxSize:
        Ref: ASGSizeMaxSize
      MinSize:
        Ref: ASGSizeMinSize
      TerminationPolicies:
      - Default
      VPCZoneIdentifier:
      - !Ref PublicSubnet2
      Tags:
      - PropagateAtLaunch: true
        Value: AppServer
        Key: Purpose
      TargetGroupARNs: [
        Ref: AppELBTargetGroupGreen ]
    DependsOn:
    - AppLaunchConfigurationGreen
    - ELBListenerRuleGreen
  AppLaunchConfigurationGreen:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 8
          VolumeType: gp2
      EbsOptimized: false
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - AMI
      InstanceMonitoring: true
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SecurityGroups: [
        Ref: InstanceSecurityGroup ]
      
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install httpd -y
          python3  -m pip install ansible 
          yum install python3-PyMySQL
          systemctl start httpd.service
          systemctl enable httpd.service
          echo "<h1>Hello World welcome to blue green deployment.</h1>" > /var/www/html/index.html
    DependsOn:
    - InstanceSecurityGroup
  AppAutoScalingBlue:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity:
        Ref: ASGBlueSize
      HealthCheckType: ELB
      HealthCheckGracePeriod: '900'
      LaunchConfigurationName:
        Ref: AppLaunchConfigurationBlue
      MaxSize:
        Ref: ASGSizeMaxSize
      MinSize:
        Ref: ASGSizeMinSize
      TerminationPolicies:
      - Default
      VPCZoneIdentifier:
      - !Ref PublicSubnet1
      Tags:
      - PropagateAtLaunch: true
        Value: AppServer
        Key: Purpose
      TargetGroupARNs: [
        Ref: AppELBTargetGroupBlue ]
    DependsOn:
    - AppLaunchConfigurationBlue
    - ELBListenerRuleBlue
  AppLaunchConfigurationBlue:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs:
          DeleteOnTermination: true
          VolumeSize: 8
          VolumeType: gp2
      EbsOptimized: false
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - AMI
      InstanceMonitoring: true
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SecurityGroups: [
        Ref: InstanceSecurityGroup ]
      
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install httpd -y
          python3  -m pip install ansible 
          yum install python3-PyMySQL
          systemctl start httpd.service
          systemctl enable httpd.service
          echo "<h1>Hello World welcome to blue green deployment.</h1>" > /var/www/html/index.html
    DependsOn:
    - InstanceSecurityGroup
  
Parameters:
  ASGGreenSize:
    Description: Desired number of EC2 instances in green Auto Scaling Group
    Type: Number
    Default: 1
  ASGBlueSize:
    Description: Desired number of EC2 instances in blue Auto Scaling Group
    Type: Number
    Default: 1
  ASGSizeMinSize:
    Description: Min number of EC2 instances in Auto Scaling Group
    Type: Number
    Default: 0
  ASGSizeMaxSize:
    Description: Max number of EC2 instances in Auto Scaling Group
    Type: Number
    Default: 4
  
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
  KeyName:
    Description: EC2 key pair
    Type: String
    #Default: test
  InternalELBName:
    Description: Internal ELB Name Assigned
    Type: String
    Default: wikiapp-internal-elb
  AppListenerColor:
    Description: default Listener color
    Type: String
    Default: blue
    AllowedValues:
    - blue
    - green
  TargetGroupBlueName:
    Description: Blue Target Group Name Assigned
    Type: String
    Default: wiki-app-blue
  TargetGroupGreenName:
    Description: Green Target Group Name Assigned
    Type: String
    Default: wiki-app-green
  

Mappings:
  RegionMap:
    ap-south-1:
      AMI: ami-06a0b4e3b7eb7a300

Outputs:
  ELBFQDN:
    Description: Elastic Load Balancer url
    Value:
      Fn::Join:
      - ''
      - - http://
        - Fn::GetAtt:
          - AppELB
          - DNSName

Conditions:
  AppListenerColorBlue:
    Fn::Equals:
    - Ref: AppListenerColor
    - blue
